Connection pool is per datasource . If one host has multiple Jboss servers  and each JBoss servers has multiple datasources  then max pool would be specific to datasources and not server and not hosts .


How to increase the connection pool size from the JBoss-Cli?
===============================================================
The CLI command for connection pool size is as follows :
===================
[domain@localhost:9999 /] /profile=full/subsystem=datasources/data-source=ExampleDS:write-attribute(name=max-pool-size,value=50) 
{
    "outcome" => "success",
    "result" => undefined,
    "server-groups" => {"main-server-group" => {"host" => {"master" => {
        "server-one" => {"response" => {"outcome" => "success"}},
        "server-two" => {"response" => {"outcome" => "success"}}
    }}}}
}

Note: Using the CLI command , the output states success , so this wont require restart .
===============================================================
===============================================================

How to get statistic of the connection pool from JBoss-Cli?
===============================================================
jboss-cli.sh --connect controller=localhost:9999  command="/host=host3/server=atp-server6/subsystem=datasources/data-source=AtpSybaseDS/statistics=pool:read-attribute(name=AvailableCount)"

===============================================================
===============================================================


===============================================================
===============================================================
Explanation of Datasource connection pool statistics:
===============================================================
The statistics definitions are available in the EAP 6 Administration and Configuration guide, which includes information similar to the following.

ActiveCount
The number of connections that are currently active. This includes connections that are InUse (see below) and connections that are available to be provided in the event of a new getConnection() request. (createdCount - destroyedCount)

AvailableCount
The number of connections that can currently be handed out. (maxPoolSize - inUseCount)

AverageBlockingTime
This is the average time spent waiting for a connection to be handed out from the pool (milliseconds). (totalBlockingTime / createdCount, before JBJCA-961)
This is the average time spent waiting for a connection to be handed out from the pool(milliseconds). (totalBlockingTime / Invocations, after JBJCA-961)

AverageCreationTime
This is the average time spent creating a new connection (milliseconds). (totalCreationTime / createdCount)

CreatedCount
The number of physical connections created.

DestroyedCount
The number of physical connections destroyed.

InUseCount
The number of physical connections that are reserved by application components which have executed a getConnection() request but not yet returned the connection to the pool by calling close(). These may or may not be actively accessing the database but they are not available to be returned by new getConnection() requests. This count may include connections that have been leaked by application code which fails to close (i.e. return to the pool) connections which are no longer needed.

MaxCreationTime
The maximum time taken to create a connection (milliseconds).

MaxUsedCount
The maximum number of connections used at one time. See InUseCount.

MaxWaitTime
The maximum time spent waiting on a connection (milliseconds).

TimedOut
The number of connections which have timed out in the pool.

TotalBlockingTime
The total time spent waiting on connections (milliseconds).

TotalCreationTime
The total time spent creating connections (milliseconds).

The users can check the value of above attributes via CLI.

Example:

Raw
[standalone@localhost:9999 /] /subsystem=datasources/data-source=ExampleDS/statistics=pool:read-attribute(name=CreatedCount)

====================================================================================
====================================================================================
How to detect leaked datasource connections using the cached connection manager (CCM) debug facility in JBoss EAP 6
see https://access.redhat.com/solutions/309913

To enable the cached connection manager (CCM) to identify a connection leak:

Enable the CCM for the datasource. It defaults to true if it is not explicitly specified but you may set use-ccm="true" explicitly.

Raw
    <subsystem xmlns="urn:jboss:domain:datasources:1.1">
       <datasources>
          <datasource ... enabled="true" use-ccm="true">
             ...
          </datasource>
       </datasources>
    </subsystem>
Verify that <cached-connection-manager> exists in the jca subsystem and set debug="true".

Raw
       <subsystem xmlns="urn:jboss:domain:jca:1.1">
          ...
          <cached-connection-manager debug="true" error="false"/>
          ...
       </subsystem>
CLI commands

NOTE that while CLI may be run to configure running servers, restart should be performed for the server where debug is required to ensure the debug setting is applied to the connection pool
Standalone Mode
Raw
/subsystem=jca/cached-connection-manager=cached-connection-manager/:write-attribute(name=debug,value=true)
Domain Mode
Raw
/profile=<your_profile_here>/subsystem=jca/cached-connection-manager=cached-connection-manager/:write-attribute(name=debug,value=true)`
Setting debug="true" will:

Log an INFO message indicating that JBoss is "Closing a connection for you. Please close them yourself"
Generate a stacktrace for the code where the leaked connection was first opened.
Close the leaked connection
The additional property error may be used to raise a RuntimeException and generate an ERROR message in the log when it is set to true.
Example with debug="true" without error="true" (i.e. <cached-connection-manager debug="true" /> or <cached-connection-manager debug="true" error="false" />):

Raw
 INFO  [org.jboss.jca.core.api.connectionmanager.ccm.CachedConnectionManager] (http-/127.0.0.1:8080-1) IJ000100: Closing a connection for you. Please close them yourself: org.jboss.jca.adapters.jdbc.jdk6.WrappedConnectionJDK6@6f1170a9: java.lang.Throwable: STACKTRACE
    at org.jboss.jca.core.connectionmanager.ccm.CachedConnectionManagerImpl.registerConnection(CachedConnectionManagerImpl.java:269)
    at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.allocateConnection(AbstractConnectionManager.java:495)
    at org.jboss.jca.adapters.jdbc.WrapperDataSource.getConnection(WrapperDataSource.java:139)
        ...
Example with debug="true" and error="true" (i.e. <cached-connection-manager debug="true" error="true"/>):

Raw
INFO  [org.jboss.jca.core.api.connectionmanager.ccm.CachedConnectionManager] (http-/127.0.0.1:8080-1) IJ000100: Closing a connection for you. Please close them yourself: org.jboss.jca.adapters.jdbc.jdk6.WrappedConnectionJDK6@27c94e11: java.lang.Throwable: STACKTRACE
    at org.jboss.jca.core.connectionmanager.ccm.CachedConnectionManagerImpl.registerConnection(CachedConnectionManagerImpl.java:269)
    at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.allocateConnection(AbstractConnectionManager.java:495)
    at org.jboss.jca.adapters.jdbc.WrapperDataSource.getConnection(WrapperDataSource.java:139)
        ...
ERROR [org.apache.catalina.connector.CoyoteAdapter] (http-/127.0.0.1:8080-1) An exception or error occurred in the container during the request processing: java.lang.RuntimeException: java.lang.RuntimeException: javax.resource.ResourceException: IJ000151: Some connections were not closed, see the log for the allocation stacktraces
    at org.jboss.as.web.ThreadSetupBindingListener.unbind(ThreadSetupBindingListener.java:67) [jboss-as-web-7.1.3.Final-redhat-4.jar:7.1.3.Final-redhat-4]
        ...
Caused by: java.lang.RuntimeException: javax.resource.ResourceException: IJ000151: Some connections were not closed, see the log for the allocation stacktraces
    at org.jboss.as.connector.deployers.ra.processors.CachedConnectionManagerSetupProcessor$CachedConnectionManagerSetupAction.teardown(CachedConnectionManagerSetupProcessor.java:85)
    at org.jboss.as.web.ThreadSetupBindingListener.unbind(ThreadSetupBindingListener.java:61) [jboss-as-web-7.1.3.Final-redhat-4.jar:7.1.3.Final-redhat-4]
    ... 8 more
Caused by: javax.resource.ResourceException: IJ000151: Some connections were not closed, see the log for the allocation stacktraces
    at org.jboss.jca.core.connectionmanager.ccm.CachedConnectionManagerImpl.popMetaAwareObject(CachedConnectionManagerImpl.java:249)
    at org.jboss.as.connector.deployers.ra.processors.CachedConnectionManagerSetupProcessor$CachedConnectionManagerSetupAction.teardown(CachedConnectionManagerSetupProcessor.java:83)
    ... 9 more
In EAP 6.4 release, a new connection pool implementation called LeakDumperManagedConnectionPool has been added. This monitors connections and provides feedback if they are never released by the application. When either the pool is shut down or flushed, a stack trace is output to the server logs. Alternatively the stack trace can be output to a separate file (ie. leaks.txt) via an additional system property.

It can be enabled by using the following two system properties:

Raw
-Dironjacamar.mcp=org.jboss.jca.core.connectionmanager.pool.mcp.LeakDumperManagedConnectionPool
-Dironjacamar.leaklog=leaks.txt
Note:

If leaks are believed to be present but nothing is reported by the CCM verify the following:
The datasource must not be configured with use-ccm="false"
The datasource must not be configured with jta="false".
See this article for details on appropriate jta configuration for your datasources.
The minimum logging level must be INFO for org.jboss.jca
Activating debug will have some impact on performance and log file size and it is, therefore, recommended that the debug configuration be used only during development or test cycles.
See also What causes 'Closing a connection for you... in EAP 6 which demonstrates proper closure of connection resources.
After verifying that no leaks exist/remain, restore the configuration by removing the debug="true" setting or using <cached-connection-manager debug="false"/> (before deploying in production).
The debug feature is not intended to be used as a resolution for connections leaked by application code.
To track the usage of datasource connections you can also enable datasource logging
Setting error to true is not recommended for production deployment. Where debug is required in production deployments, setting debug="true" should provide adequate information to diagnose the issue.
In addition to providing support for debugging, the CCM is also used to support lazy enlistment
The CCM (without debug enabled) is enabled by default and its use is normal for production systems
====================================================================================